{% extends 'base.html.twig' %}

{% block title %}Reports | MVC Course{% endblock %}

{% block body %}
    <h1>Course Reports</h1>
    
    <nav class="report-nav">
        <ul>
            <li><a href="#kmom01">Kmom01</a></li>
            <li><a href="#kmom02">Kmom02</a></li>
            <li><a href="#kmom03">Kmom03</a></li>
            <li><a href="#kmom04">Kmom04</a></li>
            <li><a href="#kmom05">Kmom05</a></li>
            <li><a href="#kmom06">Kmom06</a></li>
            <li><a href="#kmom10">Kmom10</a></li>
        </ul>
    </nav>
    
    <section id="kmom01" class="report-section">
        <h2>Kmom01</h2>
        <p>
            Wow, first week with Symfony was quite the adventure! I spent way too many hours just trying to get everything set up correctly - those dependency issues nearly drove me crazy. But once it was working, it felt so satisfying to see my first page render.
        </p>
        <p>
            The MVC pattern made sense in theory from lectures, but seeing it in action with real code helped it click for me. I kept mixing up where certain code should go at first (is this controller logic or should it be in the model?), but I'm starting to get the hang of it.
        </p>
        <p>
            Twig templates were actually fun to work with! I've used other template engines before, but Twig's syntax feels cleaner. I like how it forces you to separate logic from presentation - no more temptation to dump a bunch of PHP in the middle of HTML like I used to do.
        </p>
        <p>
            The structured approach of Symfony is definitely different from what I'm used to, but I can see how it would be helpful in bigger projects. Looking forward to building something more complex next week!
        </p>
    </section>
    
    <section id="kmom02" class="report-section">
        <h2>Kmom02</h2>
        <p>This week, I built a card game app using Symfony, and it really helped me understand how to combine object-oriented programming with the MVC structure. I created my own classes: Card, CardHand, and DeckOfCards, and even added inheritance by making a CardGraphic class to represent suits like ♥ and ♠ in a more visual way. It was cool to see how composition worked too — each deck or hand holds multiple card objects. I set up several routes like /card/deck, /deck/shuffle, and /deck/draw/:number, and made sure the deck was stored in the session so it could persist between page loads. To help with testing, I added a debug page that shows what’s in the session and a route that clears it. Flash messages were a nice touch for giving feedback when actions like resetting the session happened.</p>

        <p>For the card display, I kept it simple with UTF-8 symbols and some basic CSS styling. It looked clean and did the job without taking too much time to design. I also built a JSON API with routes like /api/deck and /api/deck/shuffle, which return card data in JSON format and update the session behind the scenes.</p>

        <p>Working with APIs in Symfony was new to me, but it was exciting to learn how to handle requests and send back structured data. I even created an optional route to deal cards to players, which added a fun little challenge. Overall, I learned a lot about how to structure a web app with reusable classes and session logic. It was great practice for working with both the frontend and backend sides of Symfony.</p>

        <p>TIL: how to apply OOP concepts in a Symfony project and how useful sessions are when managing game state like a card deck.</p>

    </section>
    
    <section id="kmom03" class="report-section">
        <h2>Kmom03</h2>
        <p>This week, I built the card game "21" (Blackjack) in PHP using Symfony. It was a fun challenge and helped me practice object-oriented programming while also applying the MVC structure more deeply. I reused and extended my previous classes like Card, CardHand, and DeckOfCards, and then added a new class for the Game logic to handle the rules of 21. The game supports drawing cards, stopping, and letting the bank take its turn — with logic that makes the bank stop at 17 or more.</p>

        <p>I created a route for the game’s landing page at <code>/game</code>, where I added a short description of the rules and a button to start a round. I also made a <code>/game/play</code> route where the player can take a card or stop. If the player goes over 21, the game ends and the bank wins. If the player stops, the bank starts playing. The game shows the cards on the screen and updates after each move.</p>

        <p>To keep the game state between moves, I stored the deck, player hand, and bank hand in the session. I also added a <code>/game/doc</code> page with a flowchart image, pseudocode, and a short class overview. This helped me organize my thoughts before starting the coding part.</p>

        <p>I used basic HTML and CSS to display the cards using UTF-8 symbols. I didn’t focus too much on design this time — just made sure it was clear and worked well. My controllers are thin and most of the logic is inside separate classes. That made the code easier to manage and read.</p>

        <p>TIL: how to structure a full game in Symfony with session-based state, and how important planning (like flowcharts and pseudocode) is before writing code.</p>
    </section>
    
    <section id="kmom04" class="report-section">
        <h2>Kmom04</h2>
        <p>Coming soon...</p>
    </section>
    
    <section id="kmom05" class="report-section">
        <h2>Kmom05</h2>
        <p>Coming soon...</p>
    </section>
    
    <section id="kmom06" class="report-section">
        <h2>Kmom06</h2>
        <p>Coming soon...</p>
    </section>
    
    <section id="kmom10" class="report-section">
        <h2>Kmom10</h2>
        <p>Coming soon...</p>
    </section>
{% endblock %}
